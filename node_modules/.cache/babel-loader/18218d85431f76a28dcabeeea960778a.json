{"ast":null,"code":"import _objectSpread from \"/Users/lukejones/GitHub/redux/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nconst initState = {\n  toggle: false,\n  change: false,\n  sort: {\n    type: {\n      toggle: false,\n      val: []\n    },\n    color: {\n      toggle: false,\n      val: []\n    }\n  },\n  user: {\n    name: \"Luke\",\n    lastName: \"Jones\",\n    country: \"CANADA\"\n  },\n  cart: []\n};\n\nconst rootReducer = (state = initState, action) => {\n  if (action.type === \"SET_TOGGLE\") {\n    return _objectSpread({}, state, {\n      toggle: !state.toggle // user:{\n      //     ...state.user,\n      //     country:(!state.toggle?\"USA\":\"CANADA\")\n      // }\n\n    });\n  }\n\n  if (action.type === \"CHANGE_COUNTRY\") {\n    return _objectSpread({}, state, {\n      user: _objectSpread({}, state.user, {\n        country: action.country\n      })\n    });\n  }\n\n  if (action.type === \"CHANGE_SORT\") {\n    let orgArray = state.sort[action.prop].val;\n\n    if (orgArray.includes(action.val)) {\n      let ind = orgArray.indexOf(action.val);\n      orgArray.splice(ind, 1);\n    } else {\n      orgArray.push(action.val);\n    }\n\n    let togg = orgArray.length > 0;\n    return _objectSpread({}, state, {\n      sort: _objectSpread({}, state.sort, {\n        [action.prop]: {\n          toggle: togg,\n          val: orgArray\n        }\n      })\n    });\n  }\n\n  if (action.type === \"INIT_CART\") {\n    return _objectSpread({}, state, {\n      cart: action.value\n    });\n  }\n\n  if (action.type === \"CHECK_CHANGE\") {\n    return _objectSpread({}, state, {\n      change: !state.change\n    });\n  }\n\n  return state;\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/lukejones/GitHub/redux/src/redux/reducers/index.js"],"names":["initState","toggle","change","sort","type","val","color","user","name","lastName","country","cart","rootReducer","state","action","orgArray","prop","includes","ind","indexOf","splice","push","togg","length","value"],"mappings":";AAAA,MAAMA,SAAS,GAAG;AACdC,EAAAA,MAAM,EAAC,KADO;AAEdC,EAAAA,MAAM,EAAC,KAFO;AAGdC,EAAAA,IAAI,EAAC;AACDC,IAAAA,IAAI,EAAC;AAACH,MAAAA,MAAM,EAAC,KAAR;AAAeI,MAAAA,GAAG,EAAC;AAAnB,KADJ;AAEDC,IAAAA,KAAK,EAAC;AAACL,MAAAA,MAAM,EAAC,KAAR;AAAeI,MAAAA,GAAG,EAAC;AAAnB;AAFL,GAHS;AAOdE,EAAAA,IAAI,EAAC;AACDC,IAAAA,IAAI,EAAC,MADJ;AAEDC,IAAAA,QAAQ,EAAC,OAFR;AAGDC,IAAAA,OAAO,EAAC;AAHP,GAPS;AAYdC,EAAAA,IAAI,EAAC;AAZS,CAAlB;;AAiBA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAACb,SAAP,EAAkBc,MAAlB,KAA2B;AAC3C,MAAGA,MAAM,CAACV,IAAP,KAAc,YAAjB,EAA8B;AAC1B,6BACOS,KADP;AAEIZ,MAAAA,MAAM,EAAC,CAACY,KAAK,CAACZ,MAFlB,CAGI;AACA;AACA;AACA;;AANJ;AAQH;;AAED,MAAGa,MAAM,CAACV,IAAP,KAAc,gBAAjB,EAAkC;AAC9B,6BACOS,KADP;AAEIN,MAAAA,IAAI,oBACGM,KAAK,CAACN,IADT;AAEAG,QAAAA,OAAO,EAACI,MAAM,CAACJ;AAFf;AAFR;AAOH;;AAED,MAAGI,MAAM,CAACV,IAAP,KAAc,aAAjB,EAA+B;AAE3B,QAAIW,QAAQ,GAAGF,KAAK,CAACV,IAAN,CAAWW,MAAM,CAACE,IAAlB,EAAwBX,GAAvC;;AAEA,QAAGU,QAAQ,CAACE,QAAT,CAAkBH,MAAM,CAACT,GAAzB,CAAH,EAAiC;AAC7B,UAAIa,GAAG,GAAGH,QAAQ,CAACI,OAAT,CAAiBL,MAAM,CAACT,GAAxB,CAAV;AACAU,MAAAA,QAAQ,CAACK,MAAT,CAAgBF,GAAhB,EAAoB,CAApB;AAEH,KAJD,MAIK;AACDH,MAAAA,QAAQ,CAACM,IAAT,CAAcP,MAAM,CAACT,GAArB;AACH;;AAED,QAAIiB,IAAI,GAAGP,QAAQ,CAACQ,MAAT,GAAkB,CAA7B;AAGA,6BACOV,KADP;AAEIV,MAAAA,IAAI,oBACGU,KAAK,CAACV,IADT;AAEA,SAACW,MAAM,CAACE,IAAR,GAAc;AACVf,UAAAA,MAAM,EAACqB,IADG;AACEjB,UAAAA,GAAG,EAACU;AADN;AAFd;AAFR;AAUH;;AAED,MAAGD,MAAM,CAACV,IAAP,KAAc,WAAjB,EAA6B;AACzB,6BACOS,KADP;AAEIF,MAAAA,IAAI,EAACG,MAAM,CAACU;AAFhB;AAIH;;AAED,MAAGV,MAAM,CAACV,IAAP,KAAc,cAAjB,EAAgC;AAC5B,6BACOS,KADP;AAEIX,MAAAA,MAAM,EAAC,CAACW,KAAK,CAACX;AAFlB;AAIH;;AAED,SAAOW,KAAP;AACH,CAhED;;AAkEA,eAAgBD,WAAhB","sourcesContent":["const initState = {\n    toggle:false,\n    change:false,\n    sort:{\n        type:{toggle:false, val:[]},\n        color:{toggle:false, val:[]}\n    },\n    user:{\n        name:\"Luke\",\n        lastName:\"Jones\",\n        country:\"CANADA\"\n    },\n    cart:[\n\n    ]\n};\n\nconst rootReducer = (state=initState, action)=>{\n    if(action.type===\"SET_TOGGLE\"){\n        return{\n            ...state,\n            toggle:!state.toggle,\n            // user:{\n            //     ...state.user,\n            //     country:(!state.toggle?\"USA\":\"CANADA\")\n            // }\n        }\n    }\n\n    if(action.type===\"CHANGE_COUNTRY\"){\n        return{\n            ...state,\n            user:{\n                ...state.user,\n                country:action.country\n            }\n        }\n    }\n\n    if(action.type===\"CHANGE_SORT\"){\n\n        let orgArray = state.sort[action.prop].val;\n\n        if(orgArray.includes(action.val)){\n            let ind = orgArray.indexOf(action.val);\n            orgArray.splice(ind,1);\n\n        }else{\n            orgArray.push(action.val)\n        }\n\n        let togg = orgArray.length > 0;\n\n\n        return{\n            ...state,\n            sort:{\n                ...state.sort,\n                [action.prop]:{\n                    toggle:togg,val:orgArray\n                }\n\n            }\n        }\n    }\n\n    if(action.type===\"INIT_CART\"){\n        return{\n            ...state,\n            cart:action.value\n        }\n    }\n\n    if(action.type===\"CHECK_CHANGE\"){\n        return{\n            ...state,\n            change:!state.change\n        }\n    }\n\n    return state;\n};\n\nexport default  rootReducer;"]},"metadata":{},"sourceType":"module"}